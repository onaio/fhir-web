// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`forms/UserForm creates object to send correctly for editing user: readonly username edit 1`] = `
<input
  className="ant-input ant-input-disabled"
  disabled={true}
  id="username"
  name="username"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  onKeyDown={[Function]}
  type="text"
  value="opensrp"
/>
`;

exports[`forms/UserForm form validation works for required fields: email errors 1`] = `
<React.Fragment>
  <li>
    Required
  </li>
</React.Fragment>
`;

exports[`forms/UserForm form validation works for required fields: first name errors 1`] = `
<React.Fragment>
  <li>
    Required
  </li>
</React.Fragment>
`;

exports[`forms/UserForm form validation works for required fields: last name errors 1`] = `
<React.Fragment>
  <li>
    Required
  </li>
</React.Fragment>
`;

exports[`forms/UserForm form validation works for required fields: username errors 1`] = `
<React.Fragment>
  <li>
    Required
  </li>
</React.Fragment>
`;

exports[`forms/UserForm renders correctly: Email 1`] = `
Object {
  "children": <ForwardRef
    disabled={false}
    id="username"
    name="username"
  />,
  "hasFeedback": false,
  "help": false,
  "label": "Username",
  "validateStatus": undefined,
}
`;

exports[`forms/UserForm renders correctly: First Name 1`] = `
Object {
  "children": <ForwardRef
    id="firstName"
    name="firstName"
  />,
  "hasFeedback": false,
  "help": false,
  "label": "First Name",
  "validateStatus": undefined,
}
`;

exports[`forms/UserForm renders correctly: Last Name 1`] = `
Object {
  "children": <ForwardRef
    id="lastName"
    name="lastName"
  />,
  "hasFeedback": false,
  "help": false,
  "label": "Last Name",
  "validateStatus": undefined,
}
`;

exports[`forms/UserForm renders correctly: Submit 1`] = `
Object {
  "children": Array [
    <Button
      block={false}
      className="create-user"
      ghost={false}
      htmlType="submit"
      loading={false}
      type="primary"
    >
      Save
    </Button>,
    <Button
      block={false}
      className="cancel-user"
      ghost={false}
      htmlType="button"
      loading={false}
      onClick={[Function]}
    >
      Cancel
    </Button>,
  ],
  "hasFeedback": false,
  "help": false,
  "validateStatus": undefined,
  "wrapperCol": Object {
    "lg": Object {
      "offset": 6,
      "span": 14,
    },
    "md": Object {
      "offset": 8,
      "span": 16,
    },
    "sm": Object {
      "offset": 12,
      "span": 24,
    },
    "xs": Object {
      "offset": 0,
      "span": 16,
    },
  },
}
`;

exports[`forms/UserForm renders correctly: User Actions 1`] = `
Object {
  "children": <Unknown
    allowClear={true}
    id="requiredActions"
    mode="multiple"
    name="requiredActions"
    onChange={[Function]}
    placeholder="Please select"
    style={
      Object {
        "width": "100%",
      }
    }
  >
    <Option
      value="CONFIGURE_TOTP"
    >
      Configure OTP
    </Option>
    <Option
      value="UPDATE_PASSWORD"
    >
      Update Password
    </Option>
    <Option
      value="UPDATE_PROFILE"
    >
      Update Profile
    </Option>
    <Option
      value="VERIFY_EMAIL"
    >
      Verify Email
    </Option>
    <Option
      value="update_user_locale"
    >
      Update User Locale
    </Option>
  </Unknown>,
  "hasFeedback": false,
  "help": false,
  "label": "Required Actions",
  "validateStatus": undefined,
}
`;

exports[`forms/UserForm renders correctly: Username 1`] = `
Object {
  "children": <ForwardRef
    id="email"
    name="email"
  />,
  "hasFeedback": false,
  "help": false,
  "label": "Email",
  "validateStatus": undefined,
}
`;

exports[`forms/UserForm renders correctly: formik props 1`] = `
Object {
  "children": [Function],
  "initialValues": Object {
    "access": Object {
      "impersonate": false,
      "manage": false,
      "manageGroupMembership": false,
      "mapRoles": false,
      "view": false,
    },
    "createdTimestamp": undefined,
    "disableableCredentialTypes": Array [],
    "email": "",
    "emailVerified": false,
    "enabled": true,
    "firstName": "",
    "id": "",
    "lastName": "",
    "notBefore": 0,
    "requiredActions": Array [],
    "totp": false,
    "username": "",
  },
  "onSubmit": [Function],
  "validationSchema": ObjectSchema {
    "_blacklist": RefSet {
      "list": Set {},
      "refs": Map {},
    },
    "_conditions": Array [],
    "_defaultDefault": [Function],
    "_deps": Array [],
    "_excludedEdges": Array [],
    "_exclusive": Object {},
    "_mutate": undefined,
    "_nodes": Array [
      "username",
      "email",
      "firstName",
      "lastName",
    ],
    "_options": Object {
      "abortEarly": true,
      "recursive": true,
    },
    "_type": "object",
    "_typeError": [Function],
    "_whitelist": RefSet {
      "list": Set {},
      "refs": Map {},
    },
    "fields": Object {
      "email": StringSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {
          "required": true,
        },
        "_mutate": undefined,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "string",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "tests": Array [
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
        "type": "string",
      },
      "firstName": StringSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {
          "required": true,
        },
        "_mutate": undefined,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "string",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "tests": Array [
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
        "type": "string",
      },
      "lastName": StringSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {
          "required": true,
        },
        "_mutate": undefined,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "string",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "tests": Array [
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
        "type": "string",
      },
      "username": StringSchema {
        "_blacklist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "_conditions": Array [],
        "_deps": Array [],
        "_exclusive": Object {
          "required": true,
        },
        "_mutate": undefined,
        "_options": Object {
          "abortEarly": true,
          "recursive": true,
        },
        "_type": "string",
        "_typeError": [Function],
        "_whitelist": RefSet {
          "list": Set {},
          "refs": Map {},
        },
        "tests": Array [
          [Function],
        ],
        "transforms": Array [
          [Function],
        ],
        "type": "string",
      },
    },
    "tests": Array [],
    "transforms": Array [
      [Function],
    ],
    "type": "object",
  },
}
`;

exports[`forms/UserForm user is not edited if api is down: readonly username edit 1`] = `
<input
  className="ant-input ant-input-disabled"
  disabled={true}
  id="username"
  name="username"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  onKeyDown={[Function]}
  type="text"
  value="opensrp"
/>
`;
