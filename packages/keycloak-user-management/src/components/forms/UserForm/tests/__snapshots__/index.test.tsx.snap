// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/forms/UserForm edits user: readonly username edit 1`] = `
<input
  className="ant-input ant-input-disabled"
  disabled={true}
  id="username"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  onKeyDown={[Function]}
  type="text"
  value="opensrp"
/>
`;

exports[`components/forms/UserForm renders correctly 1`] = `
Object {
  "children": Array [
    <h5
      className="mb-3 header-title"
    >
      Add User
    </h5>,
    <Col
      className="bg-white p-3"
      span={24}
    >
      <ForwardRef(InternalForm)
        initialValues={
          Object {
            "active": false,
            "firstName": "",
            "id": "",
            "lastName": "",
            "practitioner": undefined,
            "userGroup": undefined,
            "username": "",
          }
        }
        labelCol={
          Object {
            "lg": Object {
              "offset": 0,
              "span": 6,
            },
            "md": Object {
              "offset": 0,
              "span": 8,
            },
            "sm": Object {
              "offset": 2,
              "span": 10,
            },
            "xs": Object {
              "offset": 0,
              "span": 16,
            },
          }
        }
        onFinish={[Function]}
        wrapperCol={
          Object {
            "lg": Object {
              "span": 10,
            },
            "md": Object {
              "span": 12,
            },
            "sm": Object {
              "span": 14,
            },
            "xs": Object {
              "span": 24,
            },
          }
        }
      >
        <FormItem
          id="firstName"
          label="First Name"
          name="firstName"
          rules={
            Array [
              Object {
                "message": "First Name is required",
                "required": true,
              },
            ]
          }
        >
          <Input
            type="text"
          />
        </FormItem>
        <FormItem
          id="lastName"
          label="Last Name"
          name="lastName"
          rules={
            Array [
              Object {
                "message": "Last Name is required",
                "required": true,
              },
            ]
          }
        >
          <Input
            type="text"
          />
        </FormItem>
        <FormItem
          id="email"
          label="Email"
          name="email"
        >
          <Input
            type="text"
          />
        </FormItem>
        <FormItem
          id="username"
          label="Username"
          name="username"
          rules={
            Array [
              Object {
                "message": "Username is required",
                "required": true,
              },
            ]
          }
        >
          <Input
            disabled={false}
            type="text"
          />
        </FormItem>
        <FormItem
          id="requiredActions"
          label="Required Actions"
          name="requiredActions"
        >
          <Select
            allowClear={true}
            mode="multiple"
            onChange={[Function]}
            placeholder="Please select"
            style={
              Object {
                "width": "100%",
              }
            }
          >
            <Option
              value="CONFIGURE_TOTP"
            >
              Configure OTP
            </Option>
            <Option
              value="UPDATE_PASSWORD"
            >
              Update Password
            </Option>
            <Option
              value="UPDATE_PROFILE"
            >
              Update Profile
            </Option>
            <Option
              value="VERIFY_EMAIL"
            >
              Verify Email
            </Option>
            <Option
              value="update_user_locale"
            >
              Update User Locale
            </Option>
          </Select>
        </FormItem>
        <FormItem
          id="userGroup"
          label="Group"
          name="userGroup"
        >
          <Select
            allowClear={true}
            mode="multiple"
            placeholder="Please select"
            style={
              Object {
                "width": "100%",
              }
            }
          >
            <Option
              value="283c5d6e-9b83-4954-9f3b-4c2103e4370c"
            >
              Admin
            </Option>
            <Option
              value="a55f0b02-950f-4c6a-9857-667ffbba1dd5"
            >
              Admin 2
            </Option>
            <Option
              value="4dd15e66-7132-429b-8939-d1e601611464"
            >
              New Group
            </Option>
          </Select>
        </FormItem>
        <FormItem
          wrapperCol={
            Object {
              "lg": Object {
                "offset": 6,
                "span": 14,
              },
              "md": Object {
                "offset": 8,
                "span": 16,
              },
              "sm": Object {
                "offset": 12,
                "span": 24,
              },
              "xs": Object {
                "offset": 0,
                "span": 16,
              },
            }
          }
        >
          <Button
            block={false}
            className="create-user"
            ghost={false}
            htmlType="submit"
            loading={false}
            type="primary"
          >
            Save
          </Button>
          <Button
            block={false}
            className="cancel-user"
            ghost={false}
            htmlType="button"
            loading={false}
            onClick={[Function]}
          >
            Cancel
          </Button>
        </FormItem>
      </ForwardRef(InternalForm)>
    </Col>,
  ],
  "className": "layout-content",
}
`;

exports[`components/forms/UserForm show practitioner toggle when editing user and practitioner is null: practitionerToggle 1`] = `
Object {
  "children": <Context.Provider
    value={
      Object {
        "updateItemErrors": [Function],
      }
    }
  >
    <Memo
      update={3}
    >
      <Memo
        id="active"
        name="active"
        onChange={[Function]}
      >
        <Radio
          name="active"
          type="radio"
          value={true}
        >
          Yes
        </Radio>
        <Radio
          name="active"
          type="radio"
          value={false}
        >
          No
        </Radio>
      </Memo>
    </Memo>
  </Context.Provider>,
  "errors": Array [],
  "id": "practitionerToggle",
  "label": "Mark as Practitioner",
  "name": Array [
    "active",
  ],
  "onDomErrorVisibleChange": [Function],
  "prefixCls": "ant-form",
  "status": "",
  "touched": false,
  "validateStatus": "",
  "validating": false,
}
`;

exports[`components/forms/UserForm show practitioner toggle when editing user and practitioner is provided: practitionerToggle 1`] = `
Object {
  "children": <Context.Provider
    value={
      Object {
        "updateItemErrors": [Function],
      }
    }
  >
    <Memo
      update={3}
    >
      <Memo
        id="active"
        name="active"
        onChange={[Function]}
      >
        <Radio
          name="active"
          type="radio"
          value={true}
        >
          Yes
        </Radio>
        <Radio
          name="active"
          type="radio"
          value={false}
        >
          No
        </Radio>
      </Memo>
    </Memo>
  </Context.Provider>,
  "errors": Array [],
  "id": "practitionerToggle",
  "label": "Mark as Practitioner",
  "name": Array [
    "active",
  ],
  "onDomErrorVisibleChange": [Function],
  "prefixCls": "ant-form",
  "status": "",
  "touched": false,
  "validateStatus": "",
  "validating": false,
}
`;

exports[`components/forms/UserForm user is not edited if api is down: readonly username edit 1`] = `
<input
  className="ant-input ant-input-disabled"
  disabled={true}
  id="username"
  onBlur={[Function]}
  onChange={[Function]}
  onFocus={[Function]}
  onKeyDown={[Function]}
  type="text"
  value="opensrp"
/>
`;
