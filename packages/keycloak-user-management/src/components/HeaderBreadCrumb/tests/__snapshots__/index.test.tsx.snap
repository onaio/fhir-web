// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/HeaderBreadCrumb renders the HeadeBreadCrumb component 1`] = `
<HeaderBreadCrumb>
  <Tabs
    onChange={[Function]}
    type="card"
  >
    <ForwardRef(Tabs)
      className="ant-tabs-card"
      moreIcon={<ForwardRef(EllipsisOutlined) />}
      moreTransitionName="slide-up"
      onChange={[Function]}
      prefixCls="ant-tabs"
    >
      <div
        className="ant-tabs ant-tabs-top ant-tabs-card"
      >
        <ForwardRef(TabNavList)
          activeKey="admin"
          animated={
            Object {
              "inkBar": true,
              "tabPane": false,
            }
          }
          id="rc-tabs-test"
          mobile={false}
          moreIcon={<ForwardRef(EllipsisOutlined) />}
          moreTransitionName="slide-up"
          onTabClick={[Function]}
          panes={
            <TabPane
              tab="Users"
            />
          }
          rtl={false}
          tabPosition="top"
        >
          <div
            className="ant-tabs-nav"
            onKeyDown={[Function]}
            role="tablist"
          >
            <ExtraContent
              position="left"
              prefixCls="ant-tabs"
            />
            <ResizeObserver
              onResize={[Function]}
            >
              <div
                className="ant-tabs-nav-wrap"
              >
                <ResizeObserver
                  onResize={[Function]}
                >
                  <div
                    className="ant-tabs-nav-list"
                    style={
                      Object {
                        "transform": "translate(0px, 0px)",
                        "transition": undefined,
                      }
                    }
                  >
                    <ForwardRef(TabNode)
                      active={true}
                      id="rc-tabs-test"
                      key="admin"
                      onClick={[Function]}
                      onFocus={[Function]}
                      onRemove={[Function]}
                      prefixCls="ant-tabs"
                      rtl={false}
                      tab={
                        Object {
                          "key": "admin",
                          "node": <TabPane
                            tab="Users"
                          />,
                          "tab": "Users",
                        }
                      }
                      tabPosition="top"
                    >
                      <div
                        className="ant-tabs-tab ant-tabs-tab-active"
                        key="admin"
                        onClick={[Function]}
                        style={
                          Object {
                            "marginRight": undefined,
                          }
                        }
                      >
                        <div
                          aria-controls="rc-tabs-test-panel-admin"
                          aria-selected={true}
                          className="ant-tabs-tab-btn"
                          id="rc-tabs-test-tab-admin"
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          role="tab"
                          tabIndex={0}
                        >
                          Users
                        </div>
                      </div>
                    </ForwardRef(TabNode)>
                    <ForwardRef(AddButton)
                      prefixCls="ant-tabs"
                      style={
                        Object {
                          "visibility": null,
                        }
                      }
                    />
                    <div
                      className="ant-tabs-ink-bar ant-tabs-ink-bar-animated"
                    />
                  </div>
                </ResizeObserver>
              </div>
            </ResizeObserver>
            <ForwardRef(OperationNode)
              activeKey="admin"
              animated={
                Object {
                  "inkBar": true,
                  "tabPane": false,
                }
              }
              className="ant-tabs-nav-operations-hidden"
              id="rc-tabs-test"
              mobile={false}
              moreIcon={<ForwardRef(EllipsisOutlined) />}
              moreTransitionName="slide-up"
              onTabClick={[Function]}
              panes={
                <TabPane
                  tab="Users"
                />
              }
              prefixCls="ant-tabs"
              rtl={false}
              tabPosition="top"
              tabs={Array []}
            >
              <div
                className="ant-tabs-nav-operations ant-tabs-nav-operations-hidden"
              >
                <ForwardRef(Dropdown)
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  onVisibleChange={[Function]}
                  overlay={
                    <Menu
                      aria-activedescendant={null}
                      aria-label="expanded dropdown"
                      builtinPlacements={Object {}}
                      className=""
                      defaultOpenKeys={Array []}
                      defaultSelectedKeys={Array []}
                      id="rc-tabs-test-more-popup"
                      mode="vertical"
                      onClick={[Function]}
                      onDeselect={[Function]}
                      onOpenChange={[Function]}
                      onSelect={[Function]}
                      overflowedIndicator={
                        <span>
                          ···
                        </span>
                      }
                      prefixCls="rc-menu"
                      role="listbox"
                      selectable={true}
                      selectedKeys={
                        Array [
                          null,
                        ]
                      }
                      style={Object {}}
                      subMenuCloseDelay={0.1}
                      subMenuOpenDelay={0.1}
                      tabIndex={-1}
                      triggerSubMenuAction="hover"
                    />
                  }
                  overlayClassName=""
                  prefixCls="ant-tabs-dropdown"
                  transitionName="slide-up"
                  trigger={
                    Array [
                      "hover",
                    ]
                  }
                  visible={false}
                >
                  <Trigger
                    action={
                      Array [
                        "hover",
                      ]
                    }
                    afterPopupVisibleChange={[Function]}
                    autoDestroy={false}
                    blurDelay={0.15}
                    builtinPlacements={
                      Object {
                        "bottomCenter": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tc",
                            "bc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomLeft": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tl",
                            "bl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomRight": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tr",
                            "br",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topCenter": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bc",
                            "tc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topLeft": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bl",
                            "tl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topRight": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "br",
                            "tr",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                      }
                    }
                    defaultPopupVisible={false}
                    destroyPopupOnHide={false}
                    focusDelay={0}
                    getDocument={[Function]}
                    getPopupClassNameFromAlign={[Function]}
                    hideAction={Array []}
                    mask={false}
                    maskClosable={true}
                    mouseEnterDelay={0.1}
                    mouseLeaveDelay={0.1}
                    onPopupAlign={[Function]}
                    onPopupVisibleChange={[Function]}
                    onVisibleChange={[Function]}
                    overlay={
                      <Menu
                        aria-activedescendant={null}
                        aria-label="expanded dropdown"
                        builtinPlacements={Object {}}
                        className=""
                        defaultOpenKeys={Array []}
                        defaultSelectedKeys={Array []}
                        id="rc-tabs-test-more-popup"
                        mode="vertical"
                        onClick={[Function]}
                        onDeselect={[Function]}
                        onOpenChange={[Function]}
                        onSelect={[Function]}
                        overflowedIndicator={
                          <span>
                            ···
                          </span>
                        }
                        prefixCls="rc-menu"
                        role="listbox"
                        selectable={true}
                        selectedKeys={
                          Array [
                            null,
                          ]
                        }
                        style={Object {}}
                        subMenuCloseDelay={0.1}
                        subMenuOpenDelay={0.1}
                        tabIndex={-1}
                        triggerSubMenuAction="hover"
                      />
                    }
                    popup={
                      <React.Fragment>
                        <Menu
                          aria-activedescendant={null}
                          aria-label="expanded dropdown"
                          builtinPlacements={Object {}}
                          className=""
                          defaultOpenKeys={Array []}
                          defaultSelectedKeys={Array []}
                          id="rc-tabs-test-more-popup"
                          mode="vertical"
                          onClick={[Function]}
                          onDeselect={[Function]}
                          onOpenChange={[Function]}
                          onSelect={[Function]}
                          overflowedIndicator={
                            <span>
                              ···
                            </span>
                          }
                          prefixCls="ant-tabs-dropdown-menu"
                          role="listbox"
                          selectable={true}
                          selectedKeys={
                            Array [
                              null,
                            ]
                          }
                          style={Object {}}
                          subMenuCloseDelay={0.1}
                          subMenuOpenDelay={0.1}
                          tabIndex={-1}
                          triggerSubMenuAction="hover"
                        />
                      </React.Fragment>
                    }
                    popupAlign={Object {}}
                    popupClassName=""
                    popupPlacement="bottomLeft"
                    popupStyle={Object {}}
                    popupTransitionName="slide-up"
                    popupVisible={false}
                    prefixCls="ant-tabs-dropdown"
                    showAction={Array []}
                    stretch="minWidth"
                  >
                    <button
                      aria-controls="rc-tabs-test-more-popup"
                      aria-expanded={false}
                      aria-haspopup="listbox"
                      aria-hidden="true"
                      className="ant-tabs-nav-more"
                      id="rc-tabs-test-more"
                      key="trigger"
                      onKeyDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "marginRight": undefined,
                          "order": 1,
                          "visibility": "hidden",
                        }
                      }
                      tabIndex={-1}
                      type="button"
                    >
                      <ForwardRef(EllipsisOutlined)>
                        <AntdIcon
                          icon={
                            Object {
                              "icon": Object {
                                "attrs": Object {
                                  "focusable": "false",
                                  "viewBox": "64 64 896 896",
                                },
                                "children": Array [
                                  Object {
                                    "attrs": Object {
                                      "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z",
                                    },
                                    "tag": "path",
                                  },
                                ],
                                "tag": "svg",
                              },
                              "name": "ellipsis",
                              "theme": "outlined",
                            }
                          }
                        >
                          <span
                            aria-label="ellipsis"
                            className="anticon anticon-ellipsis"
                            role="img"
                          >
                            <IconReact
                              className=""
                              icon={
                                Object {
                                  "icon": Object {
                                    "attrs": Object {
                                      "focusable": "false",
                                      "viewBox": "64 64 896 896",
                                    },
                                    "children": Array [
                                      Object {
                                        "attrs": Object {
                                          "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z",
                                        },
                                        "tag": "path",
                                      },
                                    ],
                                    "tag": "svg",
                                  },
                                  "name": "ellipsis",
                                  "theme": "outlined",
                                }
                              }
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="ellipsis"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-ellipsis"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z"
                                  key="svg-ellipsis-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </span>
                        </AntdIcon>
                      </ForwardRef(EllipsisOutlined)>
                    </button>
                  </Trigger>
                </ForwardRef(Dropdown)>
                <ForwardRef(AddButton)
                  prefixCls="ant-tabs"
                />
              </div>
            </ForwardRef(OperationNode)>
            <ExtraContent
              position="right"
              prefixCls="ant-tabs"
            />
          </div>
        </ForwardRef(TabNavList)>
        <TabPanelList
          activeKey="admin"
          animated={
            Object {
              "inkBar": true,
              "tabPane": false,
            }
          }
          id="rc-tabs-test"
          mobile={false}
          rtl={false}
          tabPosition="top"
        >
          <div
            className="ant-tabs-content-holder"
          >
            <div
              className="ant-tabs-content ant-tabs-content-top"
              style={null}
            >
              <TabPane
                active={true}
                animated={false}
                id="rc-tabs-test"
                key="admin"
                prefixCls="ant-tabs"
                tab="Users"
                tabKey="admin"
              >
                <div
                  aria-hidden={false}
                  aria-labelledby="rc-tabs-test-tab-admin"
                  className="ant-tabs-tabpane ant-tabs-tabpane-active"
                  id="rc-tabs-test-panel-admin"
                  role="tabpanel"
                  style={Object {}}
                  tabIndex={0}
                />
              </TabPane>
            </div>
          </div>
        </TabPanelList>
      </div>
    </ForwardRef(Tabs)>
  </Tabs>
</HeaderBreadCrumb>
`;

exports[`components/HeaderBreadCrumb renders the users breadcrumb when userId is defined: bread crumb component 1`] = `
<HeaderBreadCrumb
  userId="97f36061-52fb-4474-88f2-fd286311ff1d"
>
  <Tabs
    activeKey=""
    onChange={[Function]}
    type="card"
  >
    <ForwardRef(Tabs)
      activeKey=""
      className="ant-tabs-card"
      moreIcon={<ForwardRef(EllipsisOutlined) />}
      moreTransitionName="slide-up"
      onChange={[Function]}
      prefixCls="ant-tabs"
    >
      <div
        className="ant-tabs ant-tabs-top ant-tabs-card"
      >
        <ForwardRef(TabNavList)
          activeKey=""
          animated={
            Object {
              "inkBar": true,
              "tabPane": false,
            }
          }
          id="rc-tabs-test"
          mobile={false}
          moreIcon={<ForwardRef(EllipsisOutlined) />}
          moreTransitionName="slide-up"
          onTabClick={[Function]}
          panes={
            Array [
              <TabPane
                tab="Details"
              />,
              <TabPane
                tab="Credentials"
              />,
              <TabPane
                tab="Groups"
              />,
            ]
          }
          rtl={false}
          tabPosition="top"
        >
          <div
            className="ant-tabs-nav"
            onKeyDown={[Function]}
            role="tablist"
          >
            <ExtraContent
              position="left"
              prefixCls="ant-tabs"
            />
            <ResizeObserver
              onResize={[Function]}
            >
              <div
                className="ant-tabs-nav-wrap"
              >
                <ResizeObserver
                  onResize={[Function]}
                >
                  <div
                    className="ant-tabs-nav-list"
                    style={
                      Object {
                        "transform": "translate(0px, 0px)",
                        "transition": undefined,
                      }
                    }
                  >
                    <ForwardRef(TabNode)
                      active={false}
                      id="rc-tabs-test"
                      key="details"
                      onClick={[Function]}
                      onFocus={[Function]}
                      onRemove={[Function]}
                      prefixCls="ant-tabs"
                      rtl={false}
                      tab={
                        Object {
                          "key": "details",
                          "node": <TabPane
                            tab="Details"
                          />,
                          "tab": "Details",
                        }
                      }
                      tabPosition="top"
                    >
                      <div
                        className="ant-tabs-tab"
                        key="details"
                        onClick={[Function]}
                        style={
                          Object {
                            "marginRight": undefined,
                          }
                        }
                      >
                        <div
                          aria-controls="rc-tabs-test-panel-details"
                          aria-selected={false}
                          className="ant-tabs-tab-btn"
                          id="rc-tabs-test-tab-details"
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          role="tab"
                          tabIndex={0}
                        >
                          Details
                        </div>
                      </div>
                    </ForwardRef(TabNode)>
                    <ForwardRef(TabNode)
                      active={false}
                      id="rc-tabs-test"
                      key="credentials"
                      onClick={[Function]}
                      onFocus={[Function]}
                      onRemove={[Function]}
                      prefixCls="ant-tabs"
                      rtl={false}
                      tab={
                        Object {
                          "key": "credentials",
                          "node": <TabPane
                            tab="Credentials"
                          />,
                          "tab": "Credentials",
                        }
                      }
                      tabPosition="top"
                    >
                      <div
                        className="ant-tabs-tab"
                        key="credentials"
                        onClick={[Function]}
                        style={
                          Object {
                            "marginRight": undefined,
                          }
                        }
                      >
                        <div
                          aria-controls="rc-tabs-test-panel-credentials"
                          aria-selected={false}
                          className="ant-tabs-tab-btn"
                          id="rc-tabs-test-tab-credentials"
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          role="tab"
                          tabIndex={0}
                        >
                          Credentials
                        </div>
                      </div>
                    </ForwardRef(TabNode)>
                    <ForwardRef(TabNode)
                      active={false}
                      id="rc-tabs-test"
                      key="groups"
                      onClick={[Function]}
                      onFocus={[Function]}
                      onRemove={[Function]}
                      prefixCls="ant-tabs"
                      rtl={false}
                      tab={
                        Object {
                          "key": "groups",
                          "node": <TabPane
                            tab="Groups"
                          />,
                          "tab": "Groups",
                        }
                      }
                      tabPosition="top"
                    >
                      <div
                        className="ant-tabs-tab"
                        key="groups"
                        onClick={[Function]}
                        style={
                          Object {
                            "marginRight": undefined,
                          }
                        }
                      >
                        <div
                          aria-controls="rc-tabs-test-panel-groups"
                          aria-selected={false}
                          className="ant-tabs-tab-btn"
                          id="rc-tabs-test-tab-groups"
                          onClick={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          role="tab"
                          tabIndex={0}
                        >
                          Groups
                        </div>
                      </div>
                    </ForwardRef(TabNode)>
                    <ForwardRef(AddButton)
                      prefixCls="ant-tabs"
                      style={
                        Object {
                          "visibility": null,
                        }
                      }
                    />
                    <div
                      className="ant-tabs-ink-bar ant-tabs-ink-bar-animated"
                    />
                  </div>
                </ResizeObserver>
              </div>
            </ResizeObserver>
            <ForwardRef(OperationNode)
              activeKey=""
              animated={
                Object {
                  "inkBar": true,
                  "tabPane": false,
                }
              }
              className="ant-tabs-nav-operations-hidden"
              id="rc-tabs-test"
              mobile={false}
              moreIcon={<ForwardRef(EllipsisOutlined) />}
              moreTransitionName="slide-up"
              onTabClick={[Function]}
              panes={
                Array [
                  <TabPane
                    tab="Details"
                  />,
                  <TabPane
                    tab="Credentials"
                  />,
                  <TabPane
                    tab="Groups"
                  />,
                ]
              }
              prefixCls="ant-tabs"
              rtl={false}
              tabPosition="top"
              tabs={Array []}
            >
              <div
                className="ant-tabs-nav-operations ant-tabs-nav-operations-hidden"
              >
                <ForwardRef(Dropdown)
                  mouseEnterDelay={0.1}
                  mouseLeaveDelay={0.1}
                  onVisibleChange={[Function]}
                  overlay={
                    <Menu
                      aria-activedescendant={null}
                      aria-label="expanded dropdown"
                      builtinPlacements={Object {}}
                      className=""
                      defaultOpenKeys={Array []}
                      defaultSelectedKeys={Array []}
                      id="rc-tabs-test-more-popup"
                      mode="vertical"
                      onClick={[Function]}
                      onDeselect={[Function]}
                      onOpenChange={[Function]}
                      onSelect={[Function]}
                      overflowedIndicator={
                        <span>
                          ···
                        </span>
                      }
                      prefixCls="rc-menu"
                      role="listbox"
                      selectable={true}
                      selectedKeys={
                        Array [
                          null,
                        ]
                      }
                      style={Object {}}
                      subMenuCloseDelay={0.1}
                      subMenuOpenDelay={0.1}
                      tabIndex={-1}
                      triggerSubMenuAction="hover"
                    />
                  }
                  overlayClassName=""
                  prefixCls="ant-tabs-dropdown"
                  transitionName="slide-up"
                  trigger={
                    Array [
                      "hover",
                    ]
                  }
                  visible={false}
                >
                  <Trigger
                    action={
                      Array [
                        "hover",
                      ]
                    }
                    afterPopupVisibleChange={[Function]}
                    autoDestroy={false}
                    blurDelay={0.15}
                    builtinPlacements={
                      Object {
                        "bottomCenter": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tc",
                            "bc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomLeft": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tl",
                            "bl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "bottomRight": Object {
                          "offset": Array [
                            0,
                            4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "tr",
                            "br",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topCenter": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bc",
                            "tc",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topLeft": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "bl",
                            "tl",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                        "topRight": Object {
                          "offset": Array [
                            0,
                            -4,
                          ],
                          "overflow": Object {
                            "adjustX": 1,
                            "adjustY": 1,
                          },
                          "points": Array [
                            "br",
                            "tr",
                          ],
                          "targetOffset": Array [
                            0,
                            0,
                          ],
                        },
                      }
                    }
                    defaultPopupVisible={false}
                    destroyPopupOnHide={false}
                    focusDelay={0}
                    getDocument={[Function]}
                    getPopupClassNameFromAlign={[Function]}
                    hideAction={Array []}
                    mask={false}
                    maskClosable={true}
                    mouseEnterDelay={0.1}
                    mouseLeaveDelay={0.1}
                    onPopupAlign={[Function]}
                    onPopupVisibleChange={[Function]}
                    onVisibleChange={[Function]}
                    overlay={
                      <Menu
                        aria-activedescendant={null}
                        aria-label="expanded dropdown"
                        builtinPlacements={Object {}}
                        className=""
                        defaultOpenKeys={Array []}
                        defaultSelectedKeys={Array []}
                        id="rc-tabs-test-more-popup"
                        mode="vertical"
                        onClick={[Function]}
                        onDeselect={[Function]}
                        onOpenChange={[Function]}
                        onSelect={[Function]}
                        overflowedIndicator={
                          <span>
                            ···
                          </span>
                        }
                        prefixCls="rc-menu"
                        role="listbox"
                        selectable={true}
                        selectedKeys={
                          Array [
                            null,
                          ]
                        }
                        style={Object {}}
                        subMenuCloseDelay={0.1}
                        subMenuOpenDelay={0.1}
                        tabIndex={-1}
                        triggerSubMenuAction="hover"
                      />
                    }
                    popup={
                      <React.Fragment>
                        <Menu
                          aria-activedescendant={null}
                          aria-label="expanded dropdown"
                          builtinPlacements={Object {}}
                          className=""
                          defaultOpenKeys={Array []}
                          defaultSelectedKeys={Array []}
                          id="rc-tabs-test-more-popup"
                          mode="vertical"
                          onClick={[Function]}
                          onDeselect={[Function]}
                          onOpenChange={[Function]}
                          onSelect={[Function]}
                          overflowedIndicator={
                            <span>
                              ···
                            </span>
                          }
                          prefixCls="ant-tabs-dropdown-menu"
                          role="listbox"
                          selectable={true}
                          selectedKeys={
                            Array [
                              null,
                            ]
                          }
                          style={Object {}}
                          subMenuCloseDelay={0.1}
                          subMenuOpenDelay={0.1}
                          tabIndex={-1}
                          triggerSubMenuAction="hover"
                        />
                      </React.Fragment>
                    }
                    popupAlign={Object {}}
                    popupClassName=""
                    popupPlacement="bottomLeft"
                    popupStyle={Object {}}
                    popupTransitionName="slide-up"
                    popupVisible={false}
                    prefixCls="ant-tabs-dropdown"
                    showAction={Array []}
                    stretch="minWidth"
                  >
                    <button
                      aria-controls="rc-tabs-test-more-popup"
                      aria-expanded={false}
                      aria-haspopup="listbox"
                      aria-hidden="true"
                      className="ant-tabs-nav-more"
                      id="rc-tabs-test-more"
                      key="trigger"
                      onKeyDown={[Function]}
                      onMouseEnter={[Function]}
                      onMouseLeave={[Function]}
                      style={
                        Object {
                          "marginRight": undefined,
                          "order": 1,
                          "visibility": "hidden",
                        }
                      }
                      tabIndex={-1}
                      type="button"
                    >
                      <ForwardRef(EllipsisOutlined)>
                        <AntdIcon
                          icon={
                            Object {
                              "icon": Object {
                                "attrs": Object {
                                  "focusable": "false",
                                  "viewBox": "64 64 896 896",
                                },
                                "children": Array [
                                  Object {
                                    "attrs": Object {
                                      "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z",
                                    },
                                    "tag": "path",
                                  },
                                ],
                                "tag": "svg",
                              },
                              "name": "ellipsis",
                              "theme": "outlined",
                            }
                          }
                        >
                          <span
                            aria-label="ellipsis"
                            className="anticon anticon-ellipsis"
                            role="img"
                          >
                            <IconReact
                              className=""
                              icon={
                                Object {
                                  "icon": Object {
                                    "attrs": Object {
                                      "focusable": "false",
                                      "viewBox": "64 64 896 896",
                                    },
                                    "children": Array [
                                      Object {
                                        "attrs": Object {
                                          "d": "M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z",
                                        },
                                        "tag": "path",
                                      },
                                    ],
                                    "tag": "svg",
                                  },
                                  "name": "ellipsis",
                                  "theme": "outlined",
                                }
                              }
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="ellipsis"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-ellipsis"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M176 511a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0zm280 0a56 56 0 10112 0 56 56 0 10-112 0z"
                                  key="svg-ellipsis-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </span>
                        </AntdIcon>
                      </ForwardRef(EllipsisOutlined)>
                    </button>
                  </Trigger>
                </ForwardRef(Dropdown)>
                <ForwardRef(AddButton)
                  prefixCls="ant-tabs"
                />
              </div>
            </ForwardRef(OperationNode)>
            <ExtraContent
              position="right"
              prefixCls="ant-tabs"
            />
          </div>
        </ForwardRef(TabNavList)>
        <TabPanelList
          activeKey=""
          animated={
            Object {
              "inkBar": true,
              "tabPane": false,
            }
          }
          id="rc-tabs-test"
          mobile={false}
          rtl={false}
          tabPosition="top"
        >
          <div
            className="ant-tabs-content-holder"
          >
            <div
              className="ant-tabs-content ant-tabs-content-top"
              style={null}
            >
              <TabPane
                active={false}
                animated={false}
                id="rc-tabs-test"
                key="details"
                prefixCls="ant-tabs"
                tab="Details"
                tabKey="details"
              >
                <div
                  aria-hidden={true}
                  aria-labelledby="rc-tabs-test-tab-details"
                  className="ant-tabs-tabpane"
                  id="rc-tabs-test-panel-details"
                  role="tabpanel"
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  tabIndex={-1}
                />
              </TabPane>
              <TabPane
                active={false}
                animated={false}
                id="rc-tabs-test"
                key="credentials"
                prefixCls="ant-tabs"
                tab="Credentials"
                tabKey="credentials"
              >
                <div
                  aria-hidden={true}
                  aria-labelledby="rc-tabs-test-tab-credentials"
                  className="ant-tabs-tabpane"
                  id="rc-tabs-test-panel-credentials"
                  role="tabpanel"
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  tabIndex={-1}
                />
              </TabPane>
              <TabPane
                active={false}
                animated={false}
                id="rc-tabs-test"
                key="groups"
                prefixCls="ant-tabs"
                tab="Groups"
                tabKey="groups"
              >
                <div
                  aria-hidden={true}
                  aria-labelledby="rc-tabs-test-tab-groups"
                  className="ant-tabs-tabpane"
                  id="rc-tabs-test-panel-groups"
                  role="tabpanel"
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  tabIndex={-1}
                />
              </TabPane>
            </div>
          </div>
        </TabPanelList>
      </div>
    </ForwardRef(Tabs)>
  </Tabs>
</HeaderBreadCrumb>
`;

exports[`components/HeaderBreadCrumb renders the users breadcrumb when userId is defined: bread crumb props 1`] = `
Object {
  "userId": "97f36061-52fb-4474-88f2-fd286311ff1d",
}
`;

exports[`components/HeaderBreadCrumb renders the users breadcrumb when userId is undefined: bread crumb props 1`] = `
Object {
  "userId": undefined,
}
`;
